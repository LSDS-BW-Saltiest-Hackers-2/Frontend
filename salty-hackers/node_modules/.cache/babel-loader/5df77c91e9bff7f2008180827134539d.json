{"ast":null,"code":"var _jsxFileName = \"/Users/jamiesullivan/lambda/Frontend/salty-hackers/src/components/Feed/SavedComments.js\";\nimport React, { useEffect } from 'react';\nimport { Button } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport stripHtml from \"string-strip-html\";\nimport { removeSavedComment } from '../../action/appAction';\nimport { fetchSavedComments } from '../../action/appAction';\n\nconst SavedComments = props => {\n  const {\n    isFetchingSavedComments,\n    savedComments\n  } = props;\n  useEffect(() => {\n    props.fetchSavedComments();\n  }, []); // guided project had the action function passed into the dependency array but i will first try without it\n  // and just run it once. See what happens. if it works, delete this comment.\n\n  const {\n    push\n  } = useHistory();\n  return /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, isFetchingSavedComments && /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 41\n    }\n  }, \"Fetching Comments..Should I add a spinner icon..?\"), !isFetchingSavedComments && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"saved-comments-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }\n  }, savedComments.map(item => /*#__PURE__*/React.createElement(\"div\", {\n    key: Math.random(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 29\n    }\n  }, \"Username: \", item.username), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 29\n    }\n  }, \"Comment: \", stripHtml(item.commentSaved)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 29\n    }\n  }, \"Saltiness: \", item.Saltiness), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => push(`/edit-comment/${item.id}`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 29\n    }\n  }, \"Edit\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => push(`/delete-comment/${item.id}`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 29\n    }\n  }, \"Delete\")))));\n};\n\nconst mapStateToProps = state => {\n  console.log({\n    state\n  });\n  return {\n    isFetchingSavedComments: state.isFetchingSavedComments,\n    commentSaved: state.commentSaved,\n    savedComments: state.savedComments\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchSavedComments,\n  removeSavedComment\n})(SavedComments);","map":{"version":3,"sources":["/Users/jamiesullivan/lambda/Frontend/salty-hackers/src/components/Feed/SavedComments.js"],"names":["React","useEffect","Button","connect","useHistory","stripHtml","removeSavedComment","fetchSavedComments","SavedComments","props","isFetchingSavedComments","savedComments","push","map","item","Math","random","username","commentSaved","Saltiness","id","mapStateToProps","state","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AAEA,SAASC,kBAAT,QAAmC,wBAAnC;AACA,SAASC,kBAAT,QAAmC,wBAAnC;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC7B,QAAM;AACFC,IAAAA,uBADE;AAEFC,IAAAA;AAFE,MAGFF,KAHJ;AAIAR,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,KAAK,CAACF,kBAAN;AACH,GAFQ,EAEN,EAFM,CAAT,CAL6B,CAS7B;AACA;;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAWR,UAAU,EAA3B;AACA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKM,uBAAuB,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDADhC,EAEK,CAACA,uBAAD,iBACG;AAAK,IAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKC,aAAa,CAACE,GAAd,CAAkBC,IAAI,iBACnB;AAAK,IAAA,GAAG,EAAEC,IAAI,CAACC,MAAL,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAeF,IAAI,CAACG,QAApB,CADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAaZ,SAAS,CAACS,IAAI,CAACI,YAAN,CAAtB,CAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAeJ,IAAI,CAACK,SAApB,CAHJ,eAII,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,MAAMP,IAAI,CAAE,iBAAgBE,IAAI,CAACM,EAAG,EAA1B,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,MAAMR,IAAI,CAAE,mBAAkBE,IAAI,CAACM,EAAG,EAA5B,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,CADH,CADL,CAHR,CADJ;AAmBH,CA/BD;;AAiCA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEF,IAAAA;AAAF,GAAZ;AACA,SAAO;AACHZ,IAAAA,uBAAuB,EAAEY,KAAK,CAACZ,uBAD5B;AAEHQ,IAAAA,YAAY,EAAEI,KAAK,CAACJ,YAFjB;AAGHP,IAAAA,aAAa,EAAEW,KAAK,CAACX;AAHlB,GAAP;AAKH,CAPD;;AASA,eAAeR,OAAO,CAClBkB,eADkB,EAElB;AAAEd,EAAAA,kBAAF;AAAsBD,EAAAA;AAAtB,CAFkB,CAAP,CAGbE,aAHa,CAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { Button } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom'\nimport stripHtml from \"string-strip-html\";\n\nimport { removeSavedComment } from '../../action/appAction';\nimport { fetchSavedComments } from '../../action/appAction';\n\nconst SavedComments = (props) => {\n    const {\n        isFetchingSavedComments,\n        savedComments\n    } = props\n    useEffect(() => {\n        props.fetchSavedComments();\n    }, [])\n\n    // guided project had the action function passed into the dependency array but i will first try without it\n    // and just run it once. See what happens. if it works, delete this comment.\n    const { push } = useHistory();\n    return (\n        <main>\n            {isFetchingSavedComments && <h3>Fetching Comments..Should I add a spinner icon..?</h3>}\n            {!isFetchingSavedComments && (\n                <div className='saved-comments-container'>\n                    {savedComments.map(item => (\n                        <div key={Math.random()}>\n                            <h2>Username: {item.username}</h2>\n                            <p>Comment: {stripHtml(item.commentSaved)}</p>\n                            <p>Saltiness: {item.Saltiness}</p>\n                            <Button onClick={() => push(`/edit-comment/${item.id}`)}>Edit</Button>\n                            <Button onClick={() => push(`/delete-comment/${item.id}`)}>Delete</Button>\n                            {/* <Button onClick={() => props.removeSavedComment(item.id)}>Delete</Button> */}\n                        </div>\n                    ))}\n                </div>\n            )}\n        </main>\n    )\n}\n\nconst mapStateToProps = state => {\n    console.log({ state });\n    return {\n        isFetchingSavedComments: state.isFetchingSavedComments,\n        commentSaved: state.commentSaved,\n        savedComments: state.savedComments\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    { fetchSavedComments, removeSavedComment }\n)(SavedComments)"]},"metadata":{},"sourceType":"module"}